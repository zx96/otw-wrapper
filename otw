otw_setup_wechall() {
    echo "Setting up WeChall..."

    echo -n "WeChall User:  "
    read WECHALLUSER

    echo -n "WeChall Token: "
    read WECHALLTOKEN

    sed -i '/WECHALLUSER/d' ~/.otwenv 2>/dev/null
    sed -i '/WECHALLTOKEN/d' ~/.otwenv 2>/dev/null

    echo "export WECHALLUSER=\"$WECHALLUSER\"" >> ~/.otwenv
    echo "export WECHALLTOKEN=\"$WECHALLTOKEN\"" >> ~/.otwenv
    echo "Configuration stored in ~/.otwenv"
}

otw_setup_persist() {
    echo "Creating persistent directory..."
    
    SUBDIR="$(tr -dc 'a-zA-Z0-9' < /dev/random | head -c20)"
    sed -i '/OTWUSERDIR/d' ~/.otwenv 2>/dev/null
    echo "export OTWUSERDIR=\"/d/$SUBDIR\"" >> ~/.otwenv

    echo "Your directory is: /d/$SUBDIR"
    echo "Configuration stored in ~/.otwenv"
}

otw() {
    # Check for sshpass
    command -v sshpass >/dev/null
    if [ $? -ne 0 ]; then
        echo "You need to install sshpass for this program to work."
        return
    fi
    
    # Set up the .otwpass file
    if [ ! -e ~/.otwpass ]; then
        touch ~/.otwpass
        for GAME in bandit leviathan narnia behemoth utumno maze manpage; do
            echo "${GAME}0 ${GAME}0" >> ~/.otwpass
        done
    fi

    # Check that a valid level was given
    if [[ ! "$1" =~ ^[a-z]+[0-9]+$ ]]; then
        echo 'Please enter a SSH-capable OverTheWire level in the format $GAME$LEVEL'
        echo 'For example: bandit0, leviathan2, manpage4'
        return
    fi

    # Extract the game and level
    # I know this is a shit way of doing this, but at least it works
    GAME=`sed -r 's/([a-z]+)([0-9]+)/\1/' <<< "$1"`
    LEVEL=`sed -r 's/([a-z]+)([0-9]+)/\2/' <<< "$1"`
    shift

    # Get the port number for the level
    case "$GAME" in
        bandit)
            PORT=2220 ;;
        behemoth)
            PORT=2221 ;;
        krypton)
            PORT=2222 ;;
        leviathan)
            PORT=2223 ;;
        manpage)
            PORT=2224 ;;
        maze)
            PORT=2225 ;;
        narnia)
            PORT=2226 ;;
        utumno)
            PORT=2227 ;;
        vortex)
            PORT=2228 ;;
        semtex)
            PORT=2229 ;;
        drifter)
            PORT=2230 ;;
        *)
            echo "$GAME is not supported"
            return
    esac

    # Try to get the password entry from the .otwpass file
    # If it exists, compact the spacing down to a single space
    PASS_STRING="`grep -E "$GAME$LEVEL +[a-zA-Z0-9]+" ~/.otwpass | sed -r 's/[ \t]+/ /'`"

    # Extract the password
    # From the .otwpass file
    if [ -n "$PASS_STRING" ]; then
        PASS="`cut -d' ' -f2 <<< $PASS_STRING`"
    # From a command-line argument
    elif [ -n "$1" ]; then
        PASS="$1"
        shift
    # Whoops, couldn't get a password.  Oh well.
    else
        echo "Please provide a password for $GAME$LEVEL: otw $GAME$LEVEL <password>"
        return
    fi

    # Update WeChall?
    COMMAND=""
    if [ -n "$1" ]; then
        if [[ "$1" == "wechall" ]]; then
            if [ -z "$WECHALLUSER" ] || [ -z "$WECHALLTOKEN" ]; then
                echo 'You must set WECHALLUSER and WECHALLTOKEN.  Please run otw_setup_wechall and try again.'
                return
            fi
            COMMAND="wechall; exit"
        fi
    fi

    # Try to login
    sshpass -p"$PASS" ssh -oStrictHostKeyChecking=no -oSendEnv=WECHALLUSER -oSendEnv=WECHALLTOKEN -oSendEnv=OTWUSERDIR -p $PORT $GAME$LEVEL@$GAME.labs.overthewire.org "$COMMAND"

    # Check if the password was wrong
    RET=$?
    if [ $RET -eq 5 ]; then
        echo "The password $PASS is incorrect for $GAME$LEVEL."
    # If the password was right and we got it from the command-line, save it
    elif [[ ( -z "$PASS_STRING" ) && ( $RET -eq 0 ) ]]
    then
        PASS_STRING="$GAME$LEVEL $PASS"
        echo $PASS_STRING >> ~/.otwpass
        echo "Stored password $PASS for $GAME$LEVEL."
    fi
}

# Load settings (if they exist)
if [ -e ~/.otwenv ]; then
    source ~/.otwenv
fi

